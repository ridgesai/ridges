from typing import List, Optional
from api.src.backend.entities import EvaluationsWithHydratedRuns, Evaluation, EvaluationsWithHydratedUsageRuns

async def create_evaluation(version_id: str, validator_hotkey: str) -> Evaluation: ...
async def create_evaluations_for_validator(validator_hotkey: str) -> int: ...
async def create_next_evaluation_for_screener(validator_hotkey: str) -> Optional[Evaluation]: ...
async def start_evaluation(evaluation_id: str) -> Evaluation: ...
async def reset_evaluation(evaluation_id: str) -> Evaluation: ...
async def cancel_screening_evaluation(evaluation_id: str) -> Evaluation: ...
async def finish_evaluation(evaluation_id: str, errored: bool) -> Evaluation: ...

async def get_evaluation_by_evaluation_id(evaluation_id: str) -> Evaluation: ...
async def get_evaluations_by_version_id(version_id: str) -> List[Evaluation]: ...
async def get_evaluations_for_agent_version(version_id: str) -> list[EvaluationsWithHydratedRuns]: ...
async def get_evaluations_with_usage_for_agent_version(version_id: str) -> list[EvaluationsWithHydratedUsageRuns]: ...
async def get_next_evaluation_for_validator(validator_hotkey: str) -> Optional[Evaluation]: ...
async def get_running_evaluations() -> List[Evaluation]: ...
async def get_running_evaluation_by_validator_hotkey(validator_hotkey: str) -> Optional[Evaluation]: ...
async def get_queue_info(validator_hotkey: str, length: int = 10) -> List[Evaluation]: ...

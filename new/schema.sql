-------------------------------------------------------------------------------
-- AGENTS
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS agents
(
    -- Uniquely identifies this agent
    agent_id UUID NOT NULL PRIMARY KEY,
    -- Identifies the Bittensor miner that owns this agent
    miner_hotkey TEXT NOT NULL,

    -- The name of this agent
    name TEXT NOT NULL,
    -- The version number of this agent (goes up for successive submissions from
    -- the same miner_hotkey, and starts at 1)
    version_num INTEGER NOT NULL,

    -- The current status of the agent
    --     screening_1
    --     failed_screening_1
    --     screening_2
    --     failed_screening_2
    --     evaluating
    --     finished
    --     cancelled
    status TEXT CHECK (status IN ('screening_1', 'failed_screening_1', 'screening_2', 'failed_screening_2', 'evaluating', 'finished', 'cancelled')),

    -- State transition times
    created_at TIMESTAMP WITH TIME ZONE NOT NULL,


    -- The IP address that this agent was uploaded from
    ip_address TEXT NOT NULL,
    


    UNIQUE(miner_hotkey, version_num)
);

CREATE TABLE IF NOT EXISTS approved_agents
(
    -- The ID of the approved agent
    agent_id UUID NOT NULL PRIMARY KEY REFERENCES agents,

    -- The time it was approved
    approved_at TIMESTAMP WITH TIME ZONE NOT NULL,
    

    
    UNIQUE(agent_id)
);

CREATE TABLE IF NOT EXISTS banned_miner_hotkeys
(
    -- The banned miner hotkey
    miner_hotkey TEXT NOT NULL,

    -- The time it was banned
    banned_at TIMESTAMP WITH TIME ZONE NOT NULL,

    -- The reason it was banned
    ban_reason TEXT NOT NULL,
    

    
    UNIQUE(miner_hotkey)
);






-------------------------------------------------------------------------------
-- EVALUATIONS
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS evaluations
(
    -- Uniquely identifies this evaluation
    evaluation_id UUID NOT NULL PRIMARY KEY,
    -- Identifies the agent this evaluation is for
    agent_id UUID NOT NULL REFERENCES agents,
    -- Identifies the validator/screener this evaluation is assigned to
    validator_hotkey TEXT NOT NULL,
    -- The set ID that this evaluation is using
    set_id INTEGER NOT NULL
);

CREATE VIEW IF NOT EXISTS evaluations_with_status AS
SELECT
    evaluations.*,
    CASE
        WHEN EVERY(evaluation_runs.status = 'finished') THEN 'success'
        WHEN EVERY(evaluation_runs.status IN ('finished', 'error')) THEN 'failure'
        ELSE 'running'
    END AS status
FROM evaluations
LEFT JOIN evaluation_runs USING (evaluation_id)
GROUP BY evaluations.evaluation_id;






-------------------------------------------------------------------------------
-- EVALUATION RUNS
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS evaluation_runs
(
    -- Uniquely identifies this evaluation run
    evaluation_run_id UUID NOT NULL PRIMARY KEY,
    -- Identifies the evaluation this evaluation run is part of
    evaluation_id UUID NOT NULL REFERENCES evaluations,
    -- Identifies the problem this evaluation run is for (SWE-bench or Polyglot ID)
    problem_name TEXT NOT NULL,


    -- The current status of the evaluation run
    --     pending
    --     initializing_agent
    --     running_agent
    --     initializing_eval
    --     running_eval
    --     finished
    --     error
    status TEXT CHECK (status IN ('pending', 'initializing_agent', 'running_agent', 'initializing_eval', 'running_eval', 'finished', 'error')),


    -- The patch generated by the evaluation run (if any)
    patch TEXT,
    -- The test results generated by the evaluation run (if any)
    test_results JSONB,


    -- Error information (significant only if status == “error”)
    error_code INTEGER,
    error_message TEXT,

    -- State transition times
    created_at TIMESTAMP WITH TIME ZONE NOT NULL,
    started_initializing_agent_at TIMESTAMP WITH TIME ZONE,
    started_running_agent_at TIMESTAMP WITH TIME ZONE,
    started_initializing_eval_at TIMESTAMP WITH TIME ZONE,
    started_running_eval_at TIMESTAMP WITH TIME ZONE,
    finished_or_errored_at TIMESTAMP WITH TIME ZONE,
    

    
    UNIQUE(evaluation_id, problem_name)
);

CREATE TABLE IF NOT EXISTS evaluation_run_logs
(
    -- Identifies the evaluation run these logs are for
    evaluation_run_id UUID NOT NULL PRIMARY KEY,
    
    -- The logs
    logs TEXT
);






-------------------------------------------------------------------------------
-- EVALUATION SETS
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS evaluation_sets
(
    -- Identifies the set ID (which starts at 1) that this problem belongs to
    set_id INTEGER NOT NULL,

    -- Indicates the type of problem this is
    --     screener_1
    --     screener_2
    --     validator
    type TEXT NOT NULL CHECK (type IN ('screener_1', 'screener_2', 'validator')),
    
    -- The actual problem name (SWE-Bench or Polyglot)
    problem_name TEXT,
    

    
    UNIQUE(set_id, problem_name, type)
);






-------------------------------------------------------------------------------
-- INFERENCES
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS inferences
(
    -- Uniquely identifies this inference request
    inference_id UUID NOT NULL PRIMARY KEY,
    -- Identifies the evaluation run this inference request is part of
    evaluation_run_id UUID NOT NULL REFERENCES evaluation_runs,


    -- The provider to use (Chutes, Targon, etc.)
    provider TEXT NOT NULL, 
    -- The LLM to use
    model TEXT NOT NULL, 
    -- The temperature to use
    temperature FLOAT NOT NULL,
    -- The messages
    --     [{“role”: str, “content”: str}, …]
    messages JSONB NOT NULL,


    -- The status code returned by the provider (if any)
    status_code INTEGER,
    -- The response by the LLM (if any)
    response TEXT,
    -- The number of input and output tokens (if any)
    input_tokens INTEGER,
    output_tokens INTEGER,
    -- The cost of the request (if any)
    cost FLOAT,


    -- State transition times
    request_received_at TIMESTAMP WITH TIME ZONE NOT NULL,
    response_sent_at TIMESTAMP WITH TIME ZONE
);
from typing import List, Optional
from api.src.backend.entities import EvaluationsWithHydratedRuns, Evaluation, EvaluationRun, EvaluationRunWithUsageDetails, EvaluationsWithHydratedUsageRuns
from datetime import datetime

async def get_evaluation_by_evaluation_id(evaluation_id: str) -> Evaluation: ...
async def get_evaluations_by_version_id(version_id: str) -> List[Evaluation]: ...

async def create_evaluations_for_validator(validator_hotkey: str) -> int: ...
async def get_next_evaluation_for_validator(validator_hotkey: str) -> Optional[Evaluation]: ...
async def start_evaluation(evaluation_id: str) -> Evaluation: ...
async def get_running_evaluation_by_validator_hotkey(validator_hotkey: str) -> Optional[Evaluation]: ...

async def get_queue_info(validator_hotkey: str, length: int = 10) -> List[Evaluation]: ...
async def get_current_evaluations() -> List[Evaluation]: ...
async def start_evaluation(evaluation: Evaluation) -> None: ...
async def store_evaluation(evaluation: Evaluation) -> None: ...
async def store_evaluation_run(evaluation_run: EvaluationRun) -> None: ...
async def delete_evaluation_runs(evaluation_id: str) -> None: ...

async def get_runs_for_evaluation(evaluation_id: str) -> list[EvaluationRun]: ...
async def get_runs_with_usage_for_evaluation(evaluation_id: str) -> list[EvaluationRunWithUsageDetails]: ...

async def get_run_by_id(run_id: str) -> Optional[EvaluationRun]: ...
async def get_evaluations_for_agent_version(version_id: str) -> list[EvaluationsWithHydratedRuns]: ...
async def get_evaluations_with_usage_for_agent_version(version_id: str) -> list[EvaluationsWithHydratedUsageRuns]: ...

async def check_for_new_high_score(version_id: str) -> dict: ...
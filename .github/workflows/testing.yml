name: Test Suite

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      

    
    env:
      POSTGRES_TEST_URL: postgresql://test_user:test_pass@localhost:5432/postgres
      AWS_MASTER_USERNAME: test_user
      AWS_MASTER_PASSWORD: test_pass
      AWS_RDS_PLATFORM_ENDPOINT: localhost
      AWS_RDS_PLATFORM_DB_NAME: postgres
      PGPORT: 5432
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: |
        uv sync
        uv add coverage pytest-cov ruff mypy requests websocket-client
    
    - name: Debug environment
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in tests directory:"
        ls -la tests/
        echo "Environment variables:"
        echo "POSTGRES_TEST_URL: $POSTGRES_TEST_URL"
        echo "AWS_MASTER_USERNAME: $AWS_MASTER_USERNAME"
    
    - name: Start the API server
      run: |
        echo "Starting API server..."
        export PYTHONPATH=$PWD:$PYTHONPATH
        uv run python -m api.src.main --host 0.0.0.0 &
        SERVER_PID=$!
        echo "Server started with PID: $SERVER_PID"
        
        # Wait longer for server to start and check multiple times
        for i in {1..30}; do
          echo "Checking server status (attempt $i/30)..."
          if curl -f http://localhost:8000/healthcheck > /dev/null 2>&1; then
            echo "Server is responding!"
            break
          fi
          sleep 2
        done
        
        # Final check
        echo "Final server status check..."
        ps aux | grep python
        netstat -tlnp | grep 8000 || echo "Port 8000 not listening"
        curl -v http://localhost:8000/healthcheck || echo "Server not responding"
    
    - name: Test real API endpoints
      run: |
        echo "Testing real API endpoints..."
        
        # Test healthcheck endpoint
        echo "Testing /healthcheck..."
        curl -f http://localhost:8000/healthcheck || echo "Healthcheck failed"
        
        # Test healthcheck-results endpoint
        echo "Testing /healthcheck-results..."
        curl -f http://localhost:8000/healthcheck-results | jq . || echo "Healthcheck-results failed"
        
        # Test that server is responding
        echo "Testing server response..."
        curl -f http://localhost:8000/ || echo "Root endpoint failed"
        
        echo "Real API tests completed"
    
    - name: Run real API integration tests
      run: |
        cd tests
        # Set the server URL for integration tests
        export API_BASE_URL="http://localhost:8000"
        uv run python -m pytest test_real_api.py -v --cov=api/src --cov-report=xml --no-cov-on-fail
    
    - name: Run unit tests
      run: |
        cd tests
        uv run python -m pytest test_miner_agent_flow.py test_endpoints_unit.py::TestSystemStatusEndpointsUnit test_endpoints_simple.py::TestEndpointResponseStructure::test_healthcheck_response_structure -v --cov=api/src --cov-report=xml --no-cov-on-fail
    
    - name: Lint and type check
      run: |
        uv run ruff check tests/ --fix || true
        uv run mypy tests/test_miner_agent_flow.py --ignore-missing-imports || true
    
                    - uses: codecov/codecov-action@v3
                  with:
                    fail_ci_if_error: false
                
                - name: Notify deployment webhook on success
                  if: success() && github.ref == 'refs/heads/main'
                  run: |
                    echo "Tests passed successfully on main branch, notifying deployment webhook..."
                    curl -X POST \
                      -H "Content-Type: application/json" \
                      -H "X-Hub-Signature: ${{ secrets.DEPLOY_KEY }}" \
                      http://52.22.35.122:3141/hooks/update-platform
